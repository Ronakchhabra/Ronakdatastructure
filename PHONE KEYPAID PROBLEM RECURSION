class Solution {
    private:
    void solve(string digit ,string output , int index , vector<string> &ans , string mapping[] )
    {
        // base case for recursion
        if(digit.length()<=index)
        {
            ans.push_back(output);
            return;
        }
        
        // to optain the value for 2 ex- abc
        int number = digit[index] - '0';
        // to optain coresponding string
        string value = mapping[number];
        
        // to itrate over the ABC
        
        for( int i=0 ; i< value.length(); i++)
        {
            output.push_back(value[i]);
            solve(digit, output, index+1, ans, mapping);
            output.pop_back();
        }
            
    }
public:
    vector<string> letterCombinations(string digits) {
          vector<string> ans;
        if(digits.length()==0)
            return ans;
        string output="";
        int index = 0;
        string mapping[10] = {"", "", "abc", "def", "ghi", "jkl","mno","pqrs","tuv","wxyz"};
        solve(digits, output, index, ans, mapping);
        return ans;
        
    }
};
