int srch(vector<int>& arr ,int s, int e ,int  k, int n)
{
    if(s>e)return -1;
    int mid= s+(e-s)/2;
    if(arr[mid]==k)return mid;
    if(arr[0]<=arr[mid])
    {
        if(arr[0]<=k && arr[mid]>k)
            srch(arr, s , mid-1 , k, n);
        else
            srch(arr, mid+1 ,e, k,n);
    }
    else
    {
        if(arr[n-1]>=k && arr[mid]<k)
            srch(arr, mid+1 , e , k,n);
        else
            srch(arr, s ,mid-1, k,n);
        
    }
    
}
int findPosition(vector<int>& arr, int n, int k)
{ 
    int s = 0;
  
    int e = arr.size()-1;
    int ans = srch( arr , s, e , k,n);
    return ans;
 
}

/*int findPosition(vector<int>& arr, int n, int k)
{
   int l = 0;

   int h = arr.size()-1;

   while(l <= h)

   {

       int mid = l + (h-l)/2;

       if(arr[mid] == k)

           return mid;

       if(arr[0] <= arr[mid]) // left part

       {

           if(arr[0] <= k && arr[mid] > k)

               h = mid-1;

           else

               l = mid+1;

       }

       else

       {

         if(k <= arr[n-1] && arr[mid] < k)

             l = mid+1;

           else

               h = mid-1;

       }

   }

   return -1;
}

*/

