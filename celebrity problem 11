//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution 
{
    private:
        bool knows(int a , int b ,vector<vector<int> >& M, int n )
        {
            if(M[a][b]==1)
            {return true;}
            else
            {return false;}
        }
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> s;
        
        for(int i=0 ; i<n ; i++)
        {
            s.push(i);
        }
        
        while(s.size()>1)
        {
            int a =  s.top();
            s.pop();
            
            int b = s.top();
            s.pop();
            
            if(knows(a,b,M,n))
            {
                s.push(b);
            }
            else{
                s.push(a);
                }
        }
        int element = s.top();
        int count=0;
        for(int i=0 ; i<n ; i++){
            
            if(M[element][i]==0)
            {
                count++;
            }
        }
        if(count!=n)
        {
            return -1;
        }
        int count1=0;
        for(int i=0 ; i<n ; i++){
            
            if(M[i][element]==1)
            {
                count1++;
            }
        }
        if(count1!=n-1)
        {
            return -1;
        }
        return element;
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<vector<int> > M( n , vector<int> (n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cin>>M[i][j];
            }
        }
        Solution ob;
        cout<<ob.celebrity(M,n)<<endl;

    }
}

// } Driver Code Ends
