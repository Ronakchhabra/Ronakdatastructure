// gfg solution
void rotate90Clockwise(int a[N][N])
{
 
    // Traverse each cycle
    for (int i = 0; i < N / 2; i++) {
        for (int j = i; j < N - i - 1; j++) {
 
            // Swap elements of each cycle
            // in clockwise direction
            int temp = a[i][j];
            a[i][j] = a[N - 1 - j][i];
            a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
            a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
            a[j][N - 1 - i] = temp;
        }
    }
}
// my solution
class Solution {
public:

void rotate(vector<vector<int>>& matrix) 
{
    int n = matrix.size() ;
    
    //  WHERE I = ROW , J = COLUMN  
    
    //  HERE I JUST TRANSPOSE THE MATRIX 
    for ( int i = 0 ; i < n ; i++ ) 
    for ( int j = 0 ; j < i ; j++  ) 
     swap ( matrix[i][j] , matrix[j][i] ) ;
 
    // AFTER TRANSPOSING , I JUST REVERSED THE MATRIX 
     for ( int i = 0 ; i<n ; i++ ) 
        reverse ( matrix[i].begin() , matrix[i].end() ) ;
}
} ;
