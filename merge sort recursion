 void merge( vector < int > & arr , int s, int e)
 {
     int mid = s+(e-s)/2;
     int len1 = (mid+1)-s;
     int len2 = e-mid;
     int *first= new int[len1];
     int *second= new int[len2];
     int mainindex=s;
     for(int i=0 ; i<len1; i++)
     {
         first[i]= arr[mainindex++];
     }
     mainindex= mid+1;
      for(int i=0 ; i<len2; i++)
     {
         second[i]= arr[mainindex++];
     }
     int index1= 0 ; int index2= 0;
     mainindex=s;
     while(index1 < len1 && index2 < len2)
     {
         if(first[index1]<second[index2])
             arr[mainindex++]=first[index1++];
         else
             arr[mainindex++]=second[index2++];
     }
      while(index1 < len1 )
      { arr[mainindex++]=first[index1++];}
     
      while( index2 < len2)
     {
          arr[mainindex++]=second[index2++];
     }
     delete []first;
     delete []second;
 }
void mergesor(vector < int > & arr , int s , int e)
 {if(s>=e)return;
  int mid = s+(e-s)/2;
  mergesor(arr, s, mid);
  mergesor(arr, mid+1 , e);
  merge(arr, s , e);
}
void mergeSort(vector < int > & arr, int n) {
    int s=0; 
    int e= n-1;
    mergesor(arr , s , e);
}
