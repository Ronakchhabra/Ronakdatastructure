


// linked list implementation

#include<iostream>
#include<math.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    
     Node(int data) {
        this -> data = data;
        this -> next = NULL;
    }
    
    ~Node(){
       int value = this -> data;
        //memory free
        if(this->next != NULL) {
            delete next;
            this->next = NULL;
        }
        cout << " memory is free for node with data " << value << endl;
    }


};
void print( Node* &head)
{
    Node * print = head;
    while( print!= NULL)
    {
        cout<< print-> data<< " ";
        print = print->next;
    }
    cout<< endl;
}
void inserinend(Node* &tail , int d)
{
    Node* temp= new Node(d);
    
    temp->next=NULL;
    tail->next=temp;
    tail=temp;
}
void insertathead (Node * &head,int d)
{
    Node *temp = new Node(d);
    
    temp->next = head;
    head =temp;

}
void insertinmiddle (Node* &head , int position , Node* &tail , int d)
{
    if(position ==1)
    {insertathead(head,d);
    return;

    }
    Node* nodetoi = new Node(d);
    
    Node* temp = head;
    int cnt=1;

    while(cnt< position-1)
    {
       temp=temp->next ;
       cnt++;

    }
    if(temp-> next==NULL)
    {
        inserinend(tail,d);
        return;

    }
    nodetoi->next=temp->next;
    temp->next=nodetoi;
}
void deletionnode( Node* &head , int position)
{
   
    if(position ==1)
    {
        Node* temp = head;
        temp->next = NULL;
        head=head->next;
        delete temp;
    }
    else
    {
        Node*curr= head;
        Node*prev = NULL;
        int cnt=1;
        while( cnt <position)
        {
            prev=curr;
            curr=curr->next;
            cnt++;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
    }
}
int main()
{
    Node * temp = new Node(11);// temp Node banaya jisme 10 data dala
    Node * head = temp;
   /* print(head);
    insertathead(head , 10);
    insertathead(head , 12);
    insertathead(head , 113);
    print (head);*/
    Node* tail= temp;
    //print(head);
    inserinend(tail,10);
    inserinend(tail,12);
    inserinend(tail,13);
    //print(head);
    //insertinmiddle(head , 5, tail, 5);
    print(head);
    //print(tail);
    deletionnode(head , 2);
    print(head);}



